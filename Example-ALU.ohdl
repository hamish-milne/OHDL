
enum Opcode // Enumerations will compile to the smallest type that supports all values
// In this case, UInt<2>
{
    Add,
    Sub,
    Mul,
    Div
}

module Main { // The 'Main' module is the code's entry point

    // 'out' parameters allow us to return multiple values
    // This method is combinatorial as it has no additional keywords
    int Operation(Opcode opcode, int a, int b, out bool success)
    {
        success => true; // `out` parameters must always have a value on return
        switch(opcode) {
            case Opcode.Add: // We can use 'using static' to import enum members
                return a + b;
            case Opcode.Sub:
                return a - b;
            case Opcode.Mul:
                return a * b;
            case Opcode.Div:
                return a / b;
            default:
                success => false;
                return 0;
        }
    }
    
    // Public fields will be exported. Fields are input by default
    public Opcode Opcode;
    public bit Clk;
    public int A, B;
    // Auto-properties synthesise a register internally
    public bool Success { get; private set; }
    public int Output { get; private set; }
    
    event on(clk) => Output = Operation(Opcode, A, B, out Success);
}
